// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../dist/client"
}

generator nestgraphql {
  provider                = "node node_modules/prisma-nestjs-graphql"
  output                  = "../../../generated/db-types/src"
  fields_Validator_from   = "class-validator"
  fields_Validator_input  = true
  fields_Validator_output = true
  emitSingle              = true
}

datasource db {
  provider = "postgresql"
  url      = env("KKITRON_OAUTH_DATABASE_URL")
}

model User {
  id       String @id @default(uuid())

  /// @Validator.IsString()
  /// @Validator.IsEmail()
  email    String @unique

  /// @HideField()
  /// @Validator.MinLength(8)
  /// @Validator.MaxLength(100)
  password String @db.VarChar(512)

  /// @HideField()
  /// @Validator.IsEnum(Role)
  role     Role

  @@map("users")
}

model OAuthClient {
  id Int @id @default(autoincrement())

  /// @Validator.IsString()
  /// @Validator.MaxLength(256)
  name String @unique @db.VarChar(256)

  /// @Validator.IsString()
  /// @Validator.IsOptional()
  /// @Validator.MaxLength(256)
  secret String? @db.VarChar(256)

  /// @Validator.IsDateString()
  /// @Validator.IsOptional()
  createdAt DateTime @default(now()) @map("created_at")

  /// @Validator.IsDateString()
  /// @Validator.IsOptional()
  updatedAt DateTime? @updatedAt @map("updated_at")

  redirectUris OAuthRedirectUri[] @relation("oauth_redirect_uris_to_clients")
  scopes       OAuthScope[]       @relation("oauth_scopes_to_clients")
  codes        OAuthCode[]        @relation("oauth_codes_to_clients")
  tokens       OAuthToken[]       @relation("oauth_tokens_to_clients")

  @@map("oauth_clients")
}

model OAuthRedirectUri {
  id       Int @id @default(autoincrement())
  clientId Int @map("client_id")

  /// @Validator.IsString()
  /// @Validator.MaxLength(256)
  uri String @unique @db.VarChar(256)

  /// @Validator.IsDateString()
  /// @Validator.IsOptional()
  createdAt DateTime @default(now()) @map("created_at")

  /// @Validator.IsDateString()
  /// @Validator.IsOptional()
  updatedAt DateTime? @updatedAt @map("updated_at")

  client OAuthClient @relation(fields: [clientId], references: [id], onDelete: Cascade, name: "oauth_redirect_uris_to_clients")

  @@map("oauth_redirect_uris")
}

model OAuthScope {
  id       Int @id @default(autoincrement())
  clientId Int @map("client_id")

  /// @Validator.IsString()
  /// @Validator.MaxLength(256)
  name String @db.VarChar(256)

  /// @Validator.IsDateString()
  /// @Validator.IsOptional()
  createdAt DateTime @default(now()) @map("created_at")

  /// @Validator.IsDateString()
  /// @Validator.IsOptional()
  updatedAt DateTime? @updatedAt @map("updated_at")

  client OAuthClient  @relation(fields: [clientId], references: [id], onDelete: Cascade, name: "oauth_scopes_to_clients")
  codes  OAuthCode[]  @relation("oauth_codes_to_scopes")
  tokens OAuthToken[] @relation("oauth_tokens_to_scopes")

  @@map("oauth_scopes")
}

model OAuthCode {
  id       Int @id @default(autoincrement())
  clientId Int @map("client_id")

  /// @Validator.IsString()
  /// @Validator.MaxLength(256)
  userId String? @map("user_id") @db.VarChar(256)

  /// @Validator.IsString()
  /// @Validator.MaxLength(512)
  code String @unique @db.VarChar(512)

  /// @Validator.IsString()
  /// @Validator.IsOptional()
  /// @Validator.MaxLength(256)
  redirectUri String? @map("redirect_uri") @db.VarChar(256)

  /// @Validator.IsString()
  /// @Validator.IsOptional()
  /// @Validator.MaxLength(512)
  codeChallenge String? @map("code_challenge") @db.VarChar(512)

  /// @Validator.IsEnum(CodeChallengeMethod)
  /// @Validator.IsOptional()
  codeChallengeMethod CodeChallengeMethod? @map("code_challenge_method")

  /// @Validator.IsDateString()
  /// @Validator.IsOptional()
  createdAt DateTime @default(now()) @map("created_at")

  /// @Validator.IsDateString()
  /// @Validator.IsOptional()
  updatedAt DateTime? @updatedAt @map("updated_at")

  client OAuthClient  @relation(fields: [clientId], references: [id], onDelete: Cascade, name: "oauth_codes_to_clients")
  scopes OAuthScope[] @relation("oauth_codes_to_scopes")

  @@map("oauth_codes")
}

model OAuthToken {
  id       Int @id @default(autoincrement())
  clientId Int @map("client_id")

  /// @Validator.IsString()
  /// @Validator.IsOptional()
  /// @Validator.MaxLength(256)
  userId String? @map("user_id")

  /// @Validator.IsString()
  /// @Validator.MaxLength(256)
  accessToken String @unique @map("access_token") @db.VarChar(512)

  /// @Validator.IsDateString()
  accessTokenExpiresAt DateTime @map("access_token_expires_at")

  /// @Validator.IsString()
  /// @Validator.MaxLength(256)
  refreshToken String @unique @map("refresh_token") @db.VarChar(512)

  /// @Validator.IsDateString()
  refreshTokenExpiresAt DateTime @map("refresh_token_expires_at")

  /// @Validator.IsDateString()
  /// @Validator.IsOptional()
  createdAt DateTime @default(now()) @map("created_at")

  /// @Validator.IsDateString()
  /// @Validator.IsOptional()
  updatedAt DateTime? @updatedAt @map("updated_at")

  client OAuthClient  @relation(fields: [clientId], references: [id], onDelete: Cascade, name: "oauth_tokens_to_clients")
  scopes OAuthScope[] @relation("oauth_tokens_to_scopes")

  @@map("oauth_tokens")
}

enum CodeChallengeMethod {
  S256
  plain

  @@map("code_challenge_method")
}

enum Role {
  Admin
  User

  @@map("role")
}
